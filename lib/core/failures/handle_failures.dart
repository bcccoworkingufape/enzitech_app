// üåé Project imports:
import 'failures.dart';

class HandleFailure {
  static String of(
    Failure failure, {
    bool enableStatusCode = false,
    bool overrideDefaultMessage = false,
    bool isLogin = false,
  }) {
    // EZT custom error when API is down
    if (failure.runtimeType is ServerFailure) {
      if (failure.message.contains("Connection refused")) {
        return "‚ö† Erro de Servidor, tente novamente mais tarde.";
      }
    }

    if (overrideDefaultMessage) {
      return enableStatusCode
          ? "‚ö† SC${failure.key} - ${failure.message}"
          : "‚ö† ${failure.message}";
    }

    switch (failure.key) {
      case 400:
        return "‚ö† Dados incorretos: Algum campo inv√°lido ou ausente.";
      case 401:
        return "‚ö† N√£o autorizado: Token expirado ou usu√°rio inv√°lido.";
      case 403:
        return "‚ö† Acesso negado: Voc√™ n√£o tem permiss√£o para executar esta a√ß√£o.";
      case 404:
        if (isLogin) {
          return "‚ö† Usu√°rio n√£o encontrado.";
        } else {
          return "‚ö† N√£o encontrado: Talvez essa informa√ß√£o n√£o exista mais.";
        }
      case 422:
        return "‚ö† Entidade n√£o process√°vel: N√£o foi poss√≠vel processar as instru√ß√µes presentes.";
      case 426:
        return "‚ö† Upgrade requerido: ID de dispositivo inv√°lido.";
      case 500:
        return "‚ö† Erro do Servidor: N√£o foi poss√≠vel atender √† solicita√ß√£o.";
      case 503:
        return "‚ö† Erro do Servidor: N√£o foi poss√≠vel atender √† solicita√ß√£o neste momento.";
      default:
        switch (failure.runtimeType) {
          case NoNetworkFailure:
            return "‚ö† Sem conex√£o com a internet, verfique seu acesso √† rede e tente novamente.";
          case NoResultQueryFailure:
            return "‚ö† N√£o foi poss√≠vel obter ${(failure.message).toLowerCase()}.";
          default:
            return enableStatusCode
                ? "‚ö† SC${failure.key} - ${failure.message}"
                : "‚ö† ${failure.message}";
        }
    }
  }
}
